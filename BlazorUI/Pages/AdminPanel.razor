@page "/"

@using BlazorUI.Services.APIClients
@using HttpRequestModelsClassLibrary
@using Microsoft.AspNetCore.WebUtilities
@using System.Web

@inject AnonymousDZIClient AnonymousClient
@inject AdminDZIClient AdminClient
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<ErrorBoundary>
    <ChildContent>
        @if (HasInitialized)
        {
            <div class="viewer-container position-relative h-screen">
                <OpenSeadragonViewer @ref="Viewer"
                                   TileSourcePaths="TileSourcePaths"
                                   AnnotationPaths="AnnotationPaths"
                                   OnAnnotationsChanged="OnAnnotationsChanged"
                                   OnPageChanged="OnPageChanged"
                                   class="covers-entire-parent" />

                @* Annotation Controls *@
                <div class="annotation-controls bottom-left-of-parent">
                    <button id="annotationsToggleButton" 
                            class="btn btn-primary mb-2"
                            @onclick="ToggleDisplayAnnotations">
                        <span class="oi oi-@(DisplayAnnotations ? "eye" : "eye-closed")"></span>
                    </button>

                    @if (IsAnnotating)
                    {
                        <button class="btn btn-success mb-2 ml-2"
                                @onclick="SaveAnnotations">
                            <span class="oi oi-check"></span> Save
                        </button>
                        <button class="btn btn-danger mb-2 ml-2"
                                @onclick="CancelAnnotating">
                            <span class="oi oi-x"></span> Cancel
                        </button>
                    }

                    @* Annotation List *@
                    <div class="annotation-menu-content @(ShowAnnotationList ? "show" : "")">
                        @if (DisplayAnnotations)
                        {
                            <div class="p-3 bg-light border rounded shadow">
                                <h5 class="mb-3">Annotations</h5>
                                @if (AnnotationsOnCurrentPage?.Any() == true)
                                {
                                    @foreach (var ann in AnnotationsOnCurrentPage)
                                    {
                                        <div class="annotation-item mb-2 p-2 border rounded hover:bg-gray-100">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <a class="pointer-cursor" 
                                                   @onclick="@(async() => await NavigateToAnnotation(ann))">
                                                    @GetAnnotationPreview(ann)
                                                </a>
                                                @if (IsEditing)
                                                {
                                                    <button class="btn btn-sm btn-danger"
                                                            @onclick="@(() => DeleteAnnotation(ann))">
                                                        <span class="oi oi-trash"></span>
                                                    </button>
                                                }
                                            </div>
                                            @if (ann.body.Any(b => !string.IsNullOrEmpty(b.tag)))
                                            {
                                                <div class="tags mt-1">
                                                    @foreach (var tag in ann.body.Where(b => !string.IsNullOrEmpty(b.tag)))
                                                    {
                                                        <span class="badge badge-info mr-1">@tag.tag</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">No annotations on this page</p>
                                }
                            </div>
                        }
                    </div>
                </div>

                @* Info Button *@
                <div class="fixed-bottom-right text-white" style="margin-right:50px;">
                    <button class="btn btn-info mr-2" 
                            data-toggle="modal" 
                            data-target="#descriptionModal"
                            @onclick="@(async() => await GetDescriptionForPage(PageIndex))">
                        <span class="oi oi-info"></span>
                    </button>

                    @if (IsEditing)
                    {
                        <a class="btn btn-primary" 
                           href="/admin@((Category == "") ? "" : $"?category={Category}")">
                            <span class="oi oi-pencil"></span> Edit
                        </a>
                    }
                </div>
            </div>

            @* Description Modal *@
            <div class="modal fade" id="descriptionModal" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Info</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        @if (Descriptions != null)
                        {
                            <div class="modal-body">
                                @Descriptions[PageIndex]
                            </div>
                        }
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <LoadingSpinner />
        }
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger" role="alert">
            An error has occurred. Please try refreshing the page.
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    [Parameter] public bool IsEditing { get; set; } = false;
    
    private string Category { get; set; }
    private int PageIndex { get; set; } = 0;
    private string[] TileSourcePaths { get; set; }
    private string[] AnnotationPaths { get; set; }
    private bool HasInitialized { get; set; } = false;
    private bool IsAnnotating { get; set; } = false;
    private bool ShowAnnotationList { get; set; } = true;

    public OpenSeadragonViewer Viewer { get; set; }
    private W3CWebAnnotationModel[] AnnotationsOnCurrentPage { get; set; }
    private MarkupString[] Descriptions { get; set; }
    private bool DisplayAnnotations { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var category))
            {
                Category = category;
            }

            await LoadData();
            HasInitialized = true;
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("console.error", "Initialization error:", ex);
            throw;
        }
    }

    private async Task LoadData()
    {
        string[] DirectoryURIs = await AnonymousClient.GetDZIDirectoryURIsAsync(Category);

        TileSourcePaths = new string[DirectoryURIs.Length];
        AnnotationPaths = new string[DirectoryURIs.Length];
        Descriptions = new MarkupString[DirectoryURIs.Length];
        
        for (int i = 0; i < DirectoryURIs.Length; i++)
        {
            TileSourcePaths[i] = AnonymousClient.GetTileSourceURIFromDirectoryURI(DirectoryURIs[i]);
            AnnotationPaths[i] = AnonymousClient.GetAnnotationsURIFromDirectoryURI(DirectoryURIs[i]);
        }
    }

    private async Task OnAnnotationsChanged(W3CWebAnnotationModel[] annotations)
    {
        AnnotationsOnCurrentPage = annotations;
        IsAnnotating = annotations != null && annotations.Length > 0;
        StateHasChanged();
    }

    private async Task OnPageChanged(int page)
    {
        PageIndex = page;
        await LoadAnnotationsForCurrentPage();
        StateHasChanged();
    }

    private async Task LoadAnnotationsForCurrentPage()
    {
        try
        {
            // Force reload annotations from server
            string name = HttpUtility.UrlDecode(TileSourcePaths[PageIndex]
                [(TileSourcePaths[PageIndex].LastIndexOf('/') + 1)..^4]);
            
            var response = await AdminClient.GetAnnotationsAsync(Category, name);
            if (response.IsSuccessStatusCode)
            {
                AnnotationsOnCurrentPage = await response.Content
                    .ReadFromJsonAsync<W3CWebAnnotationModel[]>();
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("console.error", "Error loading annotations:", ex);
        }
    }

    private async Task ToggleDisplayAnnotations()
    {
        DisplayAnnotations = !DisplayAnnotations;
        ShowAnnotationList = DisplayAnnotations;
        await Viewer.OpenSeadragonClient.SetDisplayAnnotations(DisplayAnnotations);
        StateHasChanged();
    }

    private async Task SaveAnnotations()
    {
        try
        {
            if (AnnotationsOnCurrentPage == null || !AnnotationsOnCurrentPage.Any())
            {
                return;
            }

            var savingDialog = await JsRuntime.InvokeAsync<object>(
                "ShowSavingDialog", "Saving annotations...");

            string name = HttpUtility.UrlDecode(TileSourcePaths[PageIndex]
                [(TileSourcePaths[PageIndex].LastIndexOf('/') + 1)..^4]);

            var response = await AdminClient.PostAnnotationsAsync(
                Category, 
                name, 
                AnnotationsOnCurrentPage);

            if (response.IsSuccessStatusCode)
            {
                await JsRuntime.InvokeVoidAsync("ShowSuccess", "Annotations saved successfully");
                await LoadAnnotationsForCurrentPage(); // Reload to verify
            }
            else
            {
                throw new Exception($"Save failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync(
                "ShowError", 
                $"Failed to save annotations: {ex.Message}");
        }
        finally
        {
            await JsRuntime.InvokeVoidAsync("HideSavingDialog");
        }
    }

    private async Task DeleteAnnotation(W3CWebAnnotationModel annotation)
    {
        if (await JsRuntime.InvokeAsync<bool>(
            "confirm", 
            "Are you sure you want to delete this annotation?"))
        {
            var updatedAnnotations = AnnotationsOnCurrentPage
                .Where(a => a.id != annotation.id)
                .ToArray();
            
            AnnotationsOnCurrentPage = updatedAnnotations;
            await SaveAnnotations();
        }
    }

    private async Task NavigateToAnnotation(W3CWebAnnotationModel annotation)
    {
        await Viewer.OpenSeadragonClient.PanTo(annotation.id);
    }

    private string GetAnnotationPreview(W3CWebAnnotationModel annotation)
    {
        var value = annotation.body.FirstOrDefault()?.value ?? "";
        return value.Length > 50 ? value[..47] + "..." : value;
    }

    private async Task GetDescriptionForPage(int i)
    {
        if (Descriptions[i].Value == null)
        {
            string name = HttpUtility.UrlDecode(TileSourcePaths[i]
                [(TileSourcePaths[i].LastIndexOf('/') + 1)..^4]);
            Descriptions[i] = await AnonymousClient.GetDescriptionAsync(Category, name);
        }
    }

    private void CancelAnnotating()
    {
        IsAnnotating = false;
        // Reset annotations to last saved state
        _ = LoadAnnotationsForCurrentPage();
    }
}

<style>
.annotation-controls {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 1000;
}

.annotation-menu-content {
    display: none;
    max-height: 60vh;
    overflow-y: auto;
    margin-top: 10px;
}

.annotation-menu-content.show {
    display: block;
}

.annotation-item:hover {
    background-color: #f8f9fa;
}

.loading-spinner {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
</style>
